"""Claims module with generic association which persists association
objects within individual tables, each one generated to persist
those objects on behalf of a particular parent class.

This configuration has the advantage that each type of parent
maintains its "Claim" rows separately, so that collection
size for one type of parent will have no impact on other types
of parent. Navigation between parent and "Claim" is simple,
direct, and bidirectional.

This recipe is the most efficient (speed wise and storage wise)
and simple of all of them.

The creation of many related tables may seem at first like an issue
but there really isn't any - the management and targeting of these tables
is completely automated.
"""
from sqlalchemy import Column, ForeignKey, Text
from sqlalchemy.ext.declarative import declared_attr
from sqlalchemy.orm import relationship

from ...core import PkModel, SoftDelete
from ..user import HasUploader
from .submit import NeedsApprove


class Claim(NeedsApprove, HasUploader, PkModel):
    """The Claim model represents an userâ€™s claim regarding a resource 
    which should be processed by administrators.

    Claims can be manually generated by the users comunity if they suspect
    a resource may be falsified or incorrect.

    **Properties**:
    """
    __abstract__ = True  # table_per_related

    #: (Text) Information created by user to describe the issue
    message = Column(Text, nullable=False)

    #: (Resource) Resource the claim is linked to
    resource = NotImplementedError()  # Implemented at HasClaims

    def __init__(self, **properties):
        """Model initialization"""
        super().__init__(**properties)

    def __repr__(self):
        """Human-readable representation string"""
        return "{} {}".format(self.__class__.__name__, self.message)

    def delete(self):
        """Deletes the claim report and restores the resource."""
        if self.resource.claims == []:
            self.resource.undelete()
        return super().delete()


class HasClaims(SoftDelete):
    """HasClaims mixin, creates a new Claim class for each resource.
    """
    __abstract__ = True

    @declared_attr
    def Claim(cls):
        table_specs = dict(
            __tablename__=f"{cls.__tablename__}_claim",
            resource_id=Column(ForeignKey(f"{cls.__tablename__}.id")),
            resource=relationship(cls)
        )
        return type(f"{cls.__name__}Claim", (Claim,), table_specs)

    @declared_attr
    def claims(cls):
        return relationship(cls.Claim)

    def claim(self, message):
        """Creates a pending claim related to the resource and soft
        deletes the resource.

        :param message: Message to include in the claim
        :type message: str
        """
        claim = self.Claim(message=message, resource=self)
        self.claims.append(claim)
        self.delete()
        return claim
