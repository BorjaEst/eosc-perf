"""Test data generation module."""

import json
from .data_types import Uploader, Site, Benchmark, Result, SiteFlavor
from .facade import facade


def _add_result(result):
    facade.add_result(result.get_json(), json.dumps({
        'uploader': result.get_uploader().get_id(),
        'site': result.get_site().get_short_name(),
        'benchmark': result.get_benchmark().get_docker_name(),
        'tags': [tag.get_name() for tag in result.get_tags()]
    }))


def add_demo():
    """Add data that is good for demonstration."""

    demo_uploader = Uploader(
        identifier='DIAGRAM_USER',
        email='diagram@example.com',
        name='Diagram (Do not use)')

    demo_site = Site(
        short_name='diagram_site',
        name="Diagram Site (Do not use)",
        address='127.0.0.1',
        description='Diagram test site entry (Do not use)')

    try:
        facade.get_site(demo_site.get_short_name())
    except facade.NotFoundError:
        facade.add_site(json.dumps({
            'short_name': demo_site.get_short_name(),
            'address': demo_site.get_address(),
            'name': demo_site.get_name(),
            'description': demo_site.get_description()
        }))
    facade.get_site(demo_site.get_short_name()).set_hidden(False)

    # re-fetch to get site with flavors (automatically added in facade)
    demo_site = facade.get_site(demo_site.get_short_name())

    flavor = SiteFlavor("test-flavor", facade.get_site(demo_site.get_short_name()), custom_text="Demo machine")

    with open('eosc_perf/controller/config/result_template.json') as file:
        demo_benchmark = Benchmark(docker_name='donotuse/diagram:test', uploader=demo_uploader, template=file.read())

    # generate a series of results with values for testing the diagram
    demo_results = []
    # skip first result for demo...
    for i in range(2, 17):
        # Numbers generated by Amdahl's Law, 1/(1-p+p/s) where p = speedup = 0.75, s = corecount
        speedup = 0.75
        data = {
            'user_args': {
                'num_gpus': i
            },
            'training': {
                'result': {
                    # generated following amdahl's law
                    'average_examples_per_sec': 1 / (1 - speedup + speedup / i) * 100
                }
            }
        }
        demo_results.append(Result(
            json=json.dumps(data),
            uploader=demo_uploader,
            site=demo_site,
            benchmark=demo_benchmark,
            flavor=flavor))

    try:
        facade.get_uploader(demo_uploader.get_id())
    except facade.NotFoundError:
        facade.add_uploader(json.dumps({
            'id': demo_uploader.get_id(),
            'email': demo_uploader.get_email(),
            'name': demo_uploader.get_name()
        }))

    try:
        facade.get_benchmark(demo_benchmark.get_docker_name())
    except facade.NotFoundError:
        facade.add_benchmark(
            demo_benchmark.get_docker_name(),
            demo_benchmark.get_uploader().get_id(),
            demo_benchmark.get_template())
    facade.get_benchmark(demo_benchmark.get_docker_name()).set_hidden(False)

    filters = {'filters': [
        {'type': 'site', 'value': demo_site.get_short_name()},
        {'type': 'benchmark', 'value': demo_benchmark.get_docker_name()}
    ]}
    results = facade.query_results(json.dumps(filters))
    # only add test results if there aren't any results
    if len(results) <= 0:
        for result in demo_results:
            _add_result(result)
