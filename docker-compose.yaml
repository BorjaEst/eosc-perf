version: '3.5'

x-sqlite-db-dir:
  &sqlite-db-dir
  type: bind
  source: ./data/


services:

  frontend:
    container_name: frontend
    restart: unless-stopped
    image: frontend
    build:
      context: ./service_frontend
      # target: ${FRONTEND_ENV}
    env_file: .env
    volumes:
      - <<: *sqlite-db-dir
        target: /app/data/
    networks:
      - frontend-net
      - backend-net
    secrets:
      - source: oidc_secret
        target: oidc_client_secret
        uid: 'uwsgi'
        mode: 0400
      - source: cookie_secret
        target: cookie_secret
        uid: 'uwsgi'
        mode: 0400

  backend:
    container_name: backend
    restart: unless-stopped
    image: backend
    build:
      context: ./service_backend
      target: ${BACKEND_ENV}
      args:
        INSTALL_PYTHON_VERSION: 3
    depends_on:
      - database
    env_file: .env
    environment:
      FLASK_ENV: ${BACKEND_ENV}
      FLASK_APP: autoapp.py
      DB_ENGINE: postgresql
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      GUNICORN_WORKERS: ${BACKEND_WORKERS}
      LOG_LEVEL: ${BACKEND_LOG_LEVEL}
      OIDC_CLIENT_ID: ${OIDC_CLIENT_ID}
      OIDC_CLIENT_SECRET: ${OIDC_CLIENT_SECRET}
    volumes:
      - ./service_backend/:/app
    networks:
      - frontend-net
      - backend-net
    ports:
      - "5000:5000"

  database:
    container_name: database
    restart: unless-stopped
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data
    volumes:
      - postgres:/data
    networks:
      - backend-net
    ports:
      - "5432:5432"

  reverse_proxy:
    container_name: reverse_proxy
    restart: unless-stopped
    image: reverse_proxy
    build:
      context: ./service_rproxy
    depends_on:
      - frontend
      - certificate
    env_file: .env
    volumes:
      - ./static:/var/www/web/
      - ./service_certificate/conf:/etc/letsencrypt
      - ./service_certificate/www:/var/www/certbot/
    secrets:
      - source: nginx_api_secret
        target: nginx_api_credentials
    ports:
      - "80:80"
      - "443:443"

  certificate:
    container_name: certificate
    restart: unless-stopped
    image: certificate
    build:
      context: ./service_certificate
    env_file: .env
    volumes:
      - ./service_certificate/conf:/etc/letsencrypt
      - ./service_certificate/www:/var/www/certbot
    secrets:
      - source: nginx_api_secret
        target: nginx_api_credentials

  database_backup:
    container_name: database_backup
    restart: unless-stopped
    image: database_backup
    build:
      context: ./service_backup
    volumes:
      - <<: *sqlite-db-dir
        target: /workdir/

networks:
  frontend-net:
  backend-net:

volumes:
  postgres:

secrets:
  oidc_secret:
    file: ./oidc_secret.txt
  cookie_secret:
    file: ./cookie_secret.txt
  nginx_api_secret:
    file: ./nginx_api_credentials.txt
